{"version":3,"sources":["components/CounterButton.js","components/Header.js","components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","action.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["CounterButton","updateCount","setState","state","count","nextProps","nextState","this","console","log","color","props","onClick","Component","Header","className","Card","name","id","email","src","alt","CardList","robots","map","user","i","key","Searchbox","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBounbry","hasError","error","info","PureComponent","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","seachfield","ErrorBoundry","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","intialStateearch","intialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f17e2d20.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass CounterButton extends Component {\n  constructor(){\n    super();\n    this.state = {\n      count: 0\n    }\n  }\n shouldComponentUpdate(nextProps, nextState){\n   if(this.state.count !== nextState.count){\n     return true\n   }\n   return false\n }\n\nupdateCount=()=>{\n  this.setState(state =>{\n    return  {count: state.count+1}\n  })\n}\n  render() { \n    console.log('count');\n    return (\n      <button color={this.props.color} onClick={this.updateCount} >Count: {this.state.count}</button>\n    )\n  }\n}\n\nexport default CounterButton;","import React, {Component} from 'react';\nimport CountButton from './CounterButton';\n\nclass Header extends Component {\n//  shouldComponentUpdate(nextProps, nextState){\n//   return true;\n//  }\n  render() { \n    console.log('header');\n    return (\n      <div>\n        <h1 className='f2'>Robot Friend</h1>\n        <CountButton color={'red'} />\n      </div>\n      \n    ) \n  }\n}\n\nexport default Header;","import React,{ Fragment } from 'react';\n\nconst Card = ({name, id, email})=> {\n  return (\n    <Fragment>\n      <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 i'>\n        <img src={`https://robohash.org/${id}?200x200`} alt='robots' />\n        <div>\n          <h2>{ name }</h2>\n          <p>{ email }</p>\n        </div>\n      </div>\n    </Fragment>\n    \n  )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList =({ robots }) =>{ \n  console.log('CarList')\n  return (\n    <div>\n      {robots.map((user, i)=>{ \n        return (\n          <Card \n            id={ user.id } \n            name={ user.name }  \n            email={ user.email } \n            key={ i }\n          />\n        )\n      })}\n    </div>\n  )\n}\n\nexport default CardList;","import React from 'react';\n\nconst Searchbox = ({searchChange})=>{\n  console.log('Searchbox')\n  return(\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue' \n        type='search' \n        placeholder='search robot'\n        onChange= {searchChange}\n      />\n    </div>\n  )\n}\n\nexport default Searchbox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px' }}>\n      {props.children}\n    </div>\n  )\n}\nexport default Scroll","import React, {PureComponent} from 'react';\n\nclass ErrorBounbry extends PureComponent{\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError : false,\n    }\n  }\n\n  compontentDidCatch(error, info){\n    this.setState({hasError: true})\n  }\n\n  render() {\n    if(this.state.hasError) {\n      return <h1>Ooooops. that is not good</h1>\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBounbry;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Header from '../components/Header'\nimport CardList from '../components/CardList';\nimport Searchbox from '../components/Searchbox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../action';\n\n//從redux取得資料\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  }\n}\n\n//從compontent Dispatch資料上redux改變它\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: ()=>dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n  \n  render() {\n    const { robots, searchField, onSearchChange, isPending } = this.props;\n    const filteredRobots = robots.filter((robot) =>{ //篩選名字有符合搜尋的機器人\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n      return (\n        <div className='tc'>\n          <Header />\n          <Searchbox \n            seachfield={ searchField }\n            searchChange={onSearchChange} \n            />\n          <Scroll>\n            {!isPending ?\n            <h1 className=\"tc\">Loading</h1> :\n            <ErrorBoundry>\n              <CardList robots={ filteredRobots } />\n            </ErrorBoundry>}\n          </Scroll>  \n        </div>\n      );\n  }  \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App) ;","import { \n  CHANGE_SEARCH_FIELD,\n  REQUSET_ROBOTS_PENDING,\n  REQUSET_ROBOTS_SUCCESS,\n  REQUSET_ROBOTS_FAILED, \n} from './constants';\n\nexport const setSearchField = (text) =>{\n  return{\n    type: CHANGE_SEARCH_FIELD,              \n    payload: text,\n  }\n};\n\n//return function 透過redux thunk(middleware) 判斷是否有連線成功(非同步處理)\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUSET_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=>  response.json())\n      .then(data => dispatch({ type: REQUSET_ROBOTS_SUCCESS , payload: data}))\n      .catch(error => dispatch({ type: REQUSET_ROBOTS_FAILED, payload: error }))\n\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUSET_ROBOTS_PENDING = 'REQUSET_ROBOTS_PENDING';\nexport const REQUSET_ROBOTS_SUCCESS = 'REQUSET_ROBOTS_SUCCESS';\nexport const REQUSET_ROBOTS_FAILED = 'REQUSET_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n  CHANGE_SEARCH_FIELD,\n  REQUSET_ROBOTS_PENDING,\n  REQUSET_ROBOTS_SUCCESS,\n  REQUSET_ROBOTS_FAILED, \n} from './constants';\n\nconst intialStateearch = {\n  searchField: '',\n}\n\nexport const searchRobots =(state=intialStateearch, action = {})=> {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload })\n    default:\n      return state;\n  }\n}\n\nconst intialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: '',\n}\n\nexport const requestRobots = (state = intialStateRobots, action={}) =>{\n  switch(action.type){\n    case REQUSET_ROBOTS_PENDING:\n      return Object.assign({}, state, {isPending: true})\n    case REQUSET_ROBOTS_SUCCESS:\n      return Object.assign({}, state , {robots: action.payload, isPending: true})\n    case  REQUSET_ROBOTS_FAILED:\n      return Object.assign({}, state, {error: action.payload, isPending: false})\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider} from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers} from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\n//使store 從reducer 裡面的值 取出來\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots,requestRobots} );\nconst store = \n  createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\n\n//用Provider 讓store 可以讓App使用 而不用綁死在APP上\nReactDOM.render(\n  <Provider store = {store}>\n     <App />\n  </Provider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}