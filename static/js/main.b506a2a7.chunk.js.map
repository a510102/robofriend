{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","id","email","className","src","alt","CardList","robots","map","user","i","key","Searchbox","searchChange","type","placeholder","onChange","Scroll","props","console","log","style","overflow","border","height","children","ErrorBounbry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","seachfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLocaleLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"kOAiBeA,EAfF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,GAAIC,EAAU,EAAVA,MACvB,OACE,kBAAC,WAAD,KACE,yBAAKC,UAAU,yDACb,yBAAKC,IAAG,+BAA0BH,EAA1B,YAAwCI,IAAI,WACpD,6BACE,4BAAML,GACN,2BAAKE,OCWAI,EAjBC,SAAC,GAAe,IAAbC,EAAY,EAAZA,OACjB,OACE,6BACGA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACE,kBAAC,EAAD,CACET,GAAKQ,EAAKR,GACVD,KAAOS,EAAKT,KACZE,MAAQO,EAAKP,MACbS,IAAMD,SCGHE,EAbG,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aAClB,OACE,yBAAKV,UAAU,OACb,2BACEA,UAAU,mCACVW,KAAK,SACLC,YAAY,eACZC,SAAWH,MCCJI,EARA,SAACC,GAEd,OADAC,QAAQC,IAAIF,GAEV,yBAAKG,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEN,EAAMO,WCgBEC,E,kDAnBb,WAAYR,GAAQ,IAAD,8BACjB,cAAMA,IACDS,MAAQ,CACXC,UAAW,GAHI,E,+DAOAC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACL,yDAEFG,KAAKb,MAAMO,a,GAhBKQ,aCoDZC,G,wDA5Cb,aAAc,IAAD,8BACX,gBAcFC,eAAiB,SAACC,GAChB,IAAMC,EAAaD,EAAME,OAAOC,MAChC,EAAKP,SAAU,CAAEK,gBAfjB,EAAKV,MAAQ,CACXpB,OAAQ,GACR8B,WAAW,IAJF,E,gEASQ,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAG,EAAKZ,SAAS,CAACzB,OAAQqC,S,+BAQ/B,IAAD,EACsBb,KAAKJ,MAA3BpB,EADA,EACAA,OAAQ8B,EADR,EACQA,WACTQ,EAAiBtC,EAAOuC,QAAO,SAACC,GACpC,OAAOA,EAAM/C,KAAKgD,oBAAoBC,SAASZ,EAAWW,wBAE1D,OAAQzC,EAAO2C,OAGb,yBAAK/C,UAAU,MACb,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CACEkC,WAAaA,EACbxB,aAAckB,KAAKI,iBAErB,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU5B,OAASsC,OAV3B,wBAAI1C,UAAU,MAAd,e,GA3BY8B,cCGEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLV,QAAQU,MAAMA,EAAMqC,a","file":"static/js/main.b506a2a7.chunk.js","sourcesContent":["import React,{ Fragment } from 'react';\n\nconst Card = ({name, id, email})=> {\n  return (\n    <Fragment>\n      <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 i'>\n        <img src={`https://robohash.org/${id}?200x200`} alt='robots' />\n        <div>\n          <h2>{ name }</h2>\n          <p>{ email }</p>\n        </div>\n      </div>\n    </Fragment>\n    \n  )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList =({ robots }) =>{ \n  return (\n    <div>\n      {robots.map((user, i)=>{ \n        return (\n          <Card \n            id={ user.id } \n            name={ user.name }  \n            email={ user.email } \n            key={ i }\n          />\n        )\n      })}\n    </div>\n  )\n}\n\nexport default CardList;","import React from 'react';\n\nconst Searchbox = ({searchChange})=>{\n  return(\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue' \n        type='search' \n        placeholder='search robot'\n        onChange= {searchChange}\n      />\n    </div>\n  )\n}\n\nexport default Searchbox;","import React from 'react';\n\nconst Scroll = (props) => {\n  console.log(props)\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px' }}>\n      {props.children}\n    </div>\n  )\n}\nexport default Scroll","import React, {Component} from 'react';\n\nclass ErrorBounbry extends Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError : false,\n    }\n  }\n\n  compontentDidCatch(error, info){\n    this.setState({hasError: true})\n  }\n\n  render() {\n    if(this.state.hasError) {\n      return <h1>Ooooops. that is not good</h1>\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBounbry;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport Searchbox from '../components/Searchbox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\nimport ErrorBounbry from '../components/ErrorBoundry';\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      robots: [],\n      seachfield:'',\n    }\n  }\n \n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=>  response.json())\n      .then(users =>this.setState({robots: users})); \n  }\n  \n  onSearchChange = (event) => { //搜尋 因為 function(){}是this指向input 所以要使用arrow function 讓htis指向app \n    const seachfield = event.target.value\n    this.setState( { seachfield });\n  }\n  \n  render() {\n    const {robots, seachfield} = this.state;\n    const filteredRobots = robots.filter((robot) =>{ //篩選名字有符合搜尋的機器人\n      return robot.name.toLocaleLowerCase().includes(seachfield.toLocaleLowerCase());\n    })\n      return !robots.length ?\n      <h1 className=\"tc\">Loading</h1> :\n        (\n        <div className='tc'>\n          <h1 className='f2'>Robot Friend</h1>\n          <Searchbox \n            seachfield={ seachfield }\n            searchChange={this.onSearchChange} \n            />\n          <Scroll>\n            <ErrorBounbry>\n              <CardList robots={ filteredRobots } />\n            </ErrorBounbry>\n          </Scroll>  \n        </div>\n      );\n  }  \n}\n\nexport default App ;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}